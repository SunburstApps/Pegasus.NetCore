@model Template
@using System.Linq
@using System.Reflection

{{
    var settings = model.AllSettings.ToLookup(s => s.Key.Value, s => (object)s.Value);
    var accessibility = settings["accessibility"].FirstOrDefault() ?? "public";
    var className = settings["classname"].FirstOrDefault() ?? "Templates";
    var encode = settings["encode"].FirstOrDefault();
    var methodName = settings["methodname"].FirstOrDefault() ?? "Render" + Path.GetFileNameWithoutExtension(model.Start.FileName);
    var modelName = settings["model"].FirstOrDefault() ?? "dynamic";
    var @namespace = settings["namespace"].First();
    var @static = bool.Parse(settings["static"].Select(v => ((SourceSpan)v).Value).FirstOrDefault() ?? "true");
    var assemblyName = typeof(WeaveCompiler).GetTypeInfo().Assembly.GetName();

    this.indentationBase = "__originalIndentation";
}}
// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by {{= assemblyName.Name }} {{= assemblyName.Version }}
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
    {{@RenderCode @namespace}}
{
    using System;
    using System.IO;
    {{each @using in settings["using"]}}
        using
            {{@RenderCode @using}}
            ;
    {{/each}}

    partial class
    {{@RenderCode className}}
    {
        [System.CodeDom.Compiler.GeneratedCode("{{= assemblyName.Name }}", "{{= assemblyName.Version }}")]
        {{@RenderCode accessibility}}
        {{if @static}}static {{/if}}void
        {{@RenderCode methodName}}
            (
            {{@RenderCode modelName}}
            model, TextWriter writer, string indentation = null)
        {
            {{if encode != null}}
                var __encode = new Func<object, string>(
                    {{@RenderCode encode}}
                    );
            {{/if}}
            var {{= this.indentationBase }} = indentation = indentation ?? string.Empty;
            {{@BaseWalkTemplate model}}
        }
    }
}
