// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 3.1.2.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "WeaveParser.peg"
           Weave.Parser
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
        #line 3 "WeaveParser.peg"
       System.Globalization
        #line default
        ;
    using
        #line 4 "WeaveParser.peg"
       System.Linq
        #line default
        ;
    using
        #line 5 "WeaveParser.peg"
       Weave.Expressions
        #line default
        ;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="WeaveParser" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "3.1.2.0")]
    public
    partial class
    #line 2 "WeaveParser.peg"
           WeaveParser
    #line default
    {
        #line 8 "WeaveParser.peg"
 
    private class RenderTag
    {
        public SourceSpan Method { get; set; }
        public SourceSpan Expression { get; set; }
    }
        #line default
        private Dictionary<CacheKey, object> storage;

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="WeaveParser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="Template" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public Template Parse(string subject, string fileName = null)
        {
            try
            {
                this.storage = new Dictionary<CacheKey, object>();
                var cursor = new Cursor(subject, 0, fileName);
                var result = this.template(ref cursor);
                if (result == null)
                {
                    throw ExceptionHelper(cursor, state => "Failed to parse 'template'.");
                }
                return result.Value;
            }
            finally
            {
                this.storage = null;
            }
        }

        private IParseResult<
            #line 16 "WeaveParser.peg"
          Template
            #line default
            > template(ref Cursor cursor)
        {
            IParseResult<Template> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<KeyValuePair<SourceSpan, SourceSpan>>> r1 = null;
            var settingsStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<KeyValuePair<SourceSpan, SourceSpan>>();
            while (true)
            {
                IParseResult<KeyValuePair<SourceSpan, SourceSpan>> r2 = null;
                r2 = this.setting(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<KeyValuePair<SourceSpan, SourceSpan>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            var settingsEnd = cursor;
            var settings = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l1 = new List<string>();
                while (l1.Count < 1)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.EOL(ref cursor);
                    if (r4 != null)
                    {
                        l1.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                if (r3 != null)
                {
                    IParseResult<IList<Element>> r5 = null;
                    var elementsStart = cursor;
                    r5 = this.lines(ref cursor);
                    var elementsEnd = cursor;
                    var elements = ValueOrDefault(r5);
                    if (r5 != null)
                    {
                        IParseResult<string> r6 = null;
                        if (r6 == null)
                        {
                            r6 = this.EOF(ref cursor);
                        }
                        if (r6 == null)
                        {
                            var startCursor3 = cursor;
                            IParseResult<string> r7 = null;
                            var unexpectedStart = cursor;
                            r7 = this.ParseAny(ref cursor);
                            var unexpectedEnd = cursor;
                            var unexpected = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                throw this.ExceptionHelper(startCursor3, state =>
                                    #line 17 "WeaveParser.peg"
                                                                        "WEAVE0007:" + string.Format(CultureInfo.CurrentCulture, Resources.WEAVE0007_UNEXPECTED_CHARACTER, unexpected)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        if (r6 != null)
                        {
                            r0 = this.ReturnHelper<Template>(startCursor0, ref cursor, state =>
                                #line 17 "WeaveParser.peg"
                                                                                                                                                                                           
        new Template(settingsStart, settings, elementsStart, elements, elementsEnd)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 21 "WeaveParser.peg"
         KeyValuePair<SourceSpan, SourceSpan>
            #line default
            > setting(ref Cursor cursor)
        {
            IParseResult<KeyValuePair<SourceSpan, SourceSpan>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "@");
            if (r1 != null)
            {
                IParseResult<SourceSpan> r2 = null;
                var keyStart = cursor;
                r2 = this.identifier(ref cursor);
                var keyEnd = cursor;
                var key = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.WS(ref cursor);
                        if (r4 != null)
                        {
                            l0.Add(r4.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 1)
                    {
                        r3 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    if (r3 != null)
                    {
                        IParseResult<string> r5 = null;
                        var valueStart = cursor;
                        var startCursor2 = cursor;
                        IParseResult<string> r6 = null;
                        r6 = this.ParseLiteral(ref cursor, "");
                        if (r6 != null)
                        {
                            IParseResult<IList<string>> r7 = null;
                            var startCursor3 = cursor;
                            var l1 = new List<string>();
                            while (true)
                            {
                                IParseResult<string> r8 = null;
                                var startCursor4 = cursor;
                                IParseResult<string> r9 = null;
                                var startCursor5 = cursor;
                                IParseResult<string> r10 = null;
                                r10 = this.EOL(ref cursor);
                                if (r10 == null)
                                {
                                    r9 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                                if (r9 != null)
                                {
                                    IParseResult<string> r11 = null;
                                    r11 = this.ParseAny(ref cursor);
                                    if (r11 != null)
                                    {
                                        {
                                            var len = cursor.Location - startCursor4.Location;
                                            r8 = this.ReturnHelper<string>(startCursor4, ref cursor, state =>
                                                state.Subject.Substring(startCursor4.Location, len)
                                                );
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor4;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor4;
                                }
                                if (r8 != null)
                                {
                                    l1.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l1.Count >= 1)
                            {
                                r7 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                            if (r7 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor2.Location;
                                    r5 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                        state.Subject.Substring(startCursor2.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                        var valueEnd = cursor;
                        var value = ValueOrDefault(r5);
                        if (r5 != null)
                        {
                            IParseResult<string> r12 = null;
                            if (r12 == null)
                            {
                                r12 = this.EOL(ref cursor);
                            }
                            if (r12 == null)
                            {
                                r12 = this.EOF(ref cursor);
                            }
                            if (r12 != null)
                            {
                                r0 = this.ReturnHelper<KeyValuePair<SourceSpan, SourceSpan>>(startCursor0, ref cursor, state =>
                                    #line 22 "WeaveParser.peg"
                                                               
        new KeyValuePair<SourceSpan, SourceSpan>(
            key,
            new SourceSpan(value, valueStart, valueEnd))
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 28 "WeaveParser.peg"
       IList<Element>
            #line default
            > lines(ref Cursor cursor)
        {
            IParseResult<IList<Element>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<IList<Element>>> r1 = null;
            var linesStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<IList<Element>>();
            while (true)
            {
                IParseResult<IList<Element>> r2 = null;
                r2 = this.line(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<IList<Element>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            var linesEnd = cursor;
            var lines = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<IList<Element>>(startCursor0, ref cursor, state =>
                    #line 29 "WeaveParser.peg"
                    lines.SelectMany(l => l).ToList()
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 31 "WeaveParser.peg"
      IList<Element>
            #line default
            > line(ref Cursor cursor)
        {
            IParseResult<IList<Element>> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<Element> r1 = null;
                var tStart = cursor;
                r1 = this.tag(ref cursor);
                var tEnd = cursor;
                var t = ValueOrDefault(r1);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<IList<Element>>(startCursor0, ref cursor, state =>
                        #line 32 "WeaveParser.peg"
              new[] { t }
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.textLine(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 35 "WeaveParser.peg"
          IList<Element>
            #line default
            > textLine(ref Cursor cursor)
        {
            IParseResult<IList<Element>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.EOF(ref cursor);
            if (r2 == null)
            {
                r1 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor1;
            }
            if (r1 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var indentationStart = cursor;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r4 = null;
                    var startCursor3 = cursor;
                    IParseResult<string> r5 = null;
                    var startCursor4 = cursor;
                    IParseResult<string> r6 = null;
                    r6 = this.EOL(ref cursor);
                    if (r6 == null)
                    {
                        r5 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                    if (r5 != null)
                    {
                        IParseResult<IList<string>> r7 = null;
                        var startCursor5 = cursor;
                        var l1 = new List<string>();
                        while (true)
                        {
                            IParseResult<string> r8 = null;
                            r8 = this.WS(ref cursor);
                            if (r8 != null)
                            {
                                l1.Add(r8.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r7 = this.ReturnHelper<IList<string>>(startCursor5, ref cursor, state => l1.AsReadOnly());
                        if (r7 != null)
                        {
                            {
                                var len = cursor.Location - startCursor3.Location;
                                r4 = this.ReturnHelper<string>(startCursor3, ref cursor, state =>
                                    state.Subject.Substring(startCursor3.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                var indentationEnd = cursor;
                var indentation = ValueOrDefault(r3);
                if (r3 != null)
                {
                    IParseResult<IList<Element>> r9 = null;
                    var contentsStart = cursor;
                    var startCursor6 = cursor;
                    var l2 = new List<Element>();
                    while (true)
                    {
                        IParseResult<Element> r10 = null;
                        r10 = this.inlineElement(ref cursor);
                        if (r10 != null)
                        {
                            l2.Add(r10.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r9 = this.ReturnHelper<IList<Element>>(startCursor6, ref cursor, state => l2.AsReadOnly());
                    var contentsEnd = cursor;
                    var contents = ValueOrDefault(r9);
                    if (r9 != null)
                    {
                        IParseResult<string> r11 = null;
                        var endStart = cursor;
                        if (r11 == null)
                        {
                            r11 = this.EOL(ref cursor);
                        }
                        if (r11 == null)
                        {
                            r11 = this.EOF(ref cursor);
                        }
                        var endEnd = cursor;
                        var end = ValueOrDefault(r11);
                        if (r11 != null)
                        {
                            r0 = this.ReturnHelper<IList<Element>>(startCursor0, ref cursor, state =>
                                #line 36 "WeaveParser.peg"
                                                                            {
        var results = new List<Element>();
        results.AddRange(indentation.Select(i => new IndentationElement(i)));
        results.AddRange(contents);

        if (end != string.Empty)
        {
            results.Add(new NewLineElement());
        }

        return results;
    }
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 49 "WeaveParser.peg"
                IList<Element>
            #line default
            > inlineContents(ref Cursor cursor)
        {
            IParseResult<IList<Element>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<Element>> r1 = null;
            var headStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<Element>();
            while (true)
            {
                IParseResult<Element> r2 = null;
                r2 = this.inlineElement(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<Element>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            var headEnd = cursor;
            var head = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<IEnumerable<Element>>> r3 = null;
                var tailStart = cursor;
                var startCursor2 = cursor;
                var l1 = new List<IEnumerable<Element>>();
                while (l1.Count < 1)
                {
                    IParseResult<IEnumerable<Element>> r4 = null;
                    var startCursor3 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.EOL(ref cursor);
                    if (r5 != null)
                    {
                        IParseResult<IList<Element>> r6 = null;
                        var lStart = cursor;
                        r6 = this.lines(ref cursor);
                        var lEnd = cursor;
                        var l = ValueOrDefault(r6);
                        if (r6 != null)
                        {
                            IParseResult<IList<string>> r7 = null;
                            var restIndentStart = cursor;
                            var startCursor4 = cursor;
                            var l2 = new List<string>();
                            while (l2.Count < 1)
                            {
                                IParseResult<string> r8 = null;
                                var startCursor5 = cursor;
                                IParseResult<string> r9 = null;
                                var startCursor6 = cursor;
                                IParseResult<string> r10 = null;
                                if (r10 == null)
                                {
                                    r10 = this.EOL(ref cursor);
                                }
                                if (r10 == null)
                                {
                                    r10 = this.EOF(ref cursor);
                                }
                                if (r10 == null)
                                {
                                    r9 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                                }
                                else
                                {
                                    cursor = startCursor6;
                                }
                                if (r9 != null)
                                {
                                    IParseResult<IList<string>> r11 = null;
                                    var startCursor7 = cursor;
                                    var l3 = new List<string>();
                                    while (true)
                                    {
                                        IParseResult<string> r12 = null;
                                        r12 = this.WS(ref cursor);
                                        if (r12 != null)
                                        {
                                            l3.Add(r12.Value);
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    r11 = this.ReturnHelper<IList<string>>(startCursor7, ref cursor, state => l3.AsReadOnly());
                                    if (r11 != null)
                                    {
                                        {
                                            var len = cursor.Location - startCursor5.Location;
                                            r8 = this.ReturnHelper<string>(startCursor5, ref cursor, state =>
                                                state.Subject.Substring(startCursor5.Location, len)
                                                );
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor5;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                                if (r8 != null)
                                {
                                    l2.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r7 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                            var restIndentEnd = cursor;
                            var restIndent = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<IList<Element>> r13 = null;
                                var restStart = cursor;
                                var startCursor8 = cursor;
                                var l4 = new List<Element>();
                                while (true)
                                {
                                    IParseResult<Element> r14 = null;
                                    r14 = this.inlineElement(ref cursor);
                                    if (r14 != null)
                                    {
                                        l4.Add(r14.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r13 = this.ReturnHelper<IList<Element>>(startCursor8, ref cursor, state => l4.AsReadOnly());
                                var restEnd = cursor;
                                var rest = ValueOrDefault(r13);
                                if (r13 != null)
                                {
                                    r4 = this.ReturnHelper<IEnumerable<Element>>(startCursor3, ref cursor, state =>
                                        #line 50 "WeaveParser.peg"
                                                                                                                        new[] { new NewLineElement() }.Concat(l).Concat(restIndent.Select(i => new IndentationElement(i))).Concat(rest)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    if (r4 != null)
                    {
                        l1.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<IEnumerable<Element>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                var tailEnd = cursor;
                var tail = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<IList<Element>>(startCursor0, ref cursor, state =>
                        #line 50 "WeaveParser.peg"
                                                                                                                                                                                                                                              head.Concat(tail.SelectMany(e => e)).ToList()
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 52 "WeaveParser.peg"
               Element
            #line default
            > inlineElement(ref Cursor cursor)
        {
            IParseResult<Element> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var tStart = cursor;
                r1 = this.text(ref cursor);
                var tEnd = cursor;
                var t = ValueOrDefault(r1);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<Element>(startCursor0, ref cursor, state =>
                        #line 53 "WeaveParser.peg"
               new TextElement(t)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.echoTag(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.inlineCodeElement(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.inlineIfElement(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.inlineEachElement(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.inlineWrapIfElement(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.inlineRenderElement(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 61 "WeaveParser.peg"
     Element
            #line default
            > tag(ref Cursor cursor)
        {
            IParseResult<Element> r0 = null;
            if (r0 == null)
            {
                r0 = this.codeElement(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.ifElement(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eachElement(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.wrapIfElement(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.renderElement(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 68 "WeaveParser.peg"
             CodeElement
            #line default
            > codeElement(ref Cursor cursor)
        {
            IParseResult<CodeElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var indentationStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.WS(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var indentationEnd = cursor;
            var indentation = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<SourceSpan> r5 = null;
                var exprStart = cursor;
                r5 = this.codeTag(ref cursor);
                var exprEnd = cursor;
                var expr = ValueOrDefault(r5);
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.WS(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        if (r8 == null)
                        {
                            r8 = this.EOL(ref cursor);
                        }
                        if (r8 == null)
                        {
                            r8 = this.EOF(ref cursor);
                        }
                        if (r8 != null)
                        {
                            r0 = this.ReturnHelper<CodeElement>(startCursor0, ref cursor, state =>
                                #line 69 "WeaveParser.peg"
                                                          new CodeElement(expr, indentation)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 71 "WeaveParser.peg"
                   CodeElement
            #line default
            > inlineCodeElement(ref Cursor cursor)
        {
            IParseResult<CodeElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<SourceSpan> r1 = null;
            var exprStart = cursor;
            r1 = this.codeTag(ref cursor);
            var exprEnd = cursor;
            var expr = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<CodeElement>(startCursor0, ref cursor, state =>
                    #line 72 "WeaveParser.peg"
                      new CodeElement(expr)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 74 "WeaveParser.peg"
           IfElement
            #line default
            > ifElement(ref Cursor cursor)
        {
            IParseResult<IfElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<Branch> r1 = null;
            var ifStart = cursor;
            r1 = this.ifBody(ref cursor);
            var ifEnd = cursor;
            var @if = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<Branch>> r2 = null;
                var elseIfsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<Branch>();
                while (true)
                {
                    IParseResult<Branch> r3 = null;
                    r3 = this.elifBody(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<Branch>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var elseIfsEnd = cursor;
                var elseIfs = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<Branch>> r4 = null;
                    var elseStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<Branch>();
                    while (l1.Count < 1)
                    {
                        IParseResult<Branch> r5 = null;
                        r5 = this.elseBody(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r4 = this.ReturnHelper<IList<Branch>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    var elseEnd = cursor;
                    var @else = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        var endIndentationStart = cursor;
                        var startCursor3 = cursor;
                        IParseResult<string> r7 = null;
                        r7 = this.ParseLiteral(ref cursor, "");
                        if (r7 != null)
                        {
                            IParseResult<IList<string>> r8 = null;
                            var startCursor4 = cursor;
                            var l2 = new List<string>();
                            while (true)
                            {
                                IParseResult<string> r9 = null;
                                r9 = this.WS(ref cursor);
                                if (r9 != null)
                                {
                                    l2.Add(r9.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r8 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                            if (r8 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor3.Location;
                                    r6 = this.ReturnHelper<string>(startCursor3, ref cursor, state =>
                                        state.Subject.Substring(startCursor3.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                        var endIndentationEnd = cursor;
                        var endIndentation = ValueOrDefault(r6);
                        if (r6 != null)
                        {
                            IParseResult<string> r10 = null;
                            r10 = this.endIfTag(ref cursor);
                            if (r10 != null)
                            {
                                IParseResult<IList<string>> r11 = null;
                                var startCursor5 = cursor;
                                var l3 = new List<string>();
                                while (true)
                                {
                                    IParseResult<string> r12 = null;
                                    r12 = this.WS(ref cursor);
                                    if (r12 != null)
                                    {
                                        l3.Add(r12.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r11 = this.ReturnHelper<IList<string>>(startCursor5, ref cursor, state => l3.AsReadOnly());
                                if (r11 != null)
                                {
                                    IParseResult<string> r13 = null;
                                    if (r13 == null)
                                    {
                                        r13 = this.EOL(ref cursor);
                                    }
                                    if (r13 == null)
                                    {
                                        r13 = this.EOF(ref cursor);
                                    }
                                    if (r13 != null)
                                    {
                                        r0 = this.ReturnHelper<IfElement>(startCursor0, ref cursor, state =>
                                            #line 75 "WeaveParser.peg"
                                                                                                   
        new IfElement(new[] { @if }.Concat(elseIfs).Concat(@else), endIndentation)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 79 "WeaveParser.peg"
        Branch
            #line default
            > ifBody(ref Cursor cursor)
        {
            IParseResult<Branch> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var indentationStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.WS(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var indentationEnd = cursor;
            var indentation = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<SourceSpan> r5 = null;
                var exprStart = cursor;
                r5 = this.ifTag(ref cursor);
                var exprEnd = cursor;
                var expr = ValueOrDefault(r5);
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.WS(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.EOL(ref cursor);
                        if (r8 != null)
                        {
                            IParseResult<IList<Element>> r9 = null;
                            var bodyStart = cursor;
                            r9 = this.lines(ref cursor);
                            var bodyEnd = cursor;
                            var body = ValueOrDefault(r9);
                            if (r9 != null)
                            {
                                r0 = this.ReturnHelper<Branch>(startCursor0, ref cursor, state =>
                                    #line 80 "WeaveParser.peg"
                                                             new Branch(expr, body, indentation)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 82 "WeaveParser.peg"
          Branch
            #line default
            > elifBody(ref Cursor cursor)
        {
            IParseResult<Branch> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var indentationStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.WS(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var indentationEnd = cursor;
            var indentation = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<SourceSpan> r5 = null;
                var exprStart = cursor;
                r5 = this.elifTag(ref cursor);
                var exprEnd = cursor;
                var expr = ValueOrDefault(r5);
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.WS(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.EOL(ref cursor);
                        if (r8 != null)
                        {
                            IParseResult<IList<Element>> r9 = null;
                            var bodyStart = cursor;
                            r9 = this.lines(ref cursor);
                            var bodyEnd = cursor;
                            var body = ValueOrDefault(r9);
                            if (r9 != null)
                            {
                                r0 = this.ReturnHelper<Branch>(startCursor0, ref cursor, state =>
                                    #line 83 "WeaveParser.peg"
                                                             new Branch(expr, body, indentation)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 85 "WeaveParser.peg"
          Branch
            #line default
            > elseBody(ref Cursor cursor)
        {
            IParseResult<Branch> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var indentationStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.WS(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var indentationEnd = cursor;
            var indentation = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r5 = null;
                r5 = this.elseTag(ref cursor);
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.WS(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.EOL(ref cursor);
                        if (r8 != null)
                        {
                            IParseResult<IList<Element>> r9 = null;
                            var bodyStart = cursor;
                            r9 = this.lines(ref cursor);
                            var bodyEnd = cursor;
                            var body = ValueOrDefault(r9);
                            if (r9 != null)
                            {
                                r0 = this.ReturnHelper<Branch>(startCursor0, ref cursor, state =>
                                    #line 86 "WeaveParser.peg"
                                                             new Branch(null, body, indentation)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 88 "WeaveParser.peg"
                 IfElement
            #line default
            > inlineIfElement(ref Cursor cursor)
        {
            IParseResult<IfElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<Branch> r1 = null;
            var ifStart = cursor;
            r1 = this.inlineIfBody(ref cursor);
            var ifEnd = cursor;
            var @if = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<Branch>> r2 = null;
                var elseIfsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<Branch>();
                while (true)
                {
                    IParseResult<Branch> r3 = null;
                    r3 = this.inlineElifBody(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<Branch>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var elseIfsEnd = cursor;
                var elseIfs = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<Branch>> r4 = null;
                    var elseStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<Branch>();
                    while (l1.Count < 1)
                    {
                        IParseResult<Branch> r5 = null;
                        r5 = this.inlineElseBody(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r4 = this.ReturnHelper<IList<Branch>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    var elseEnd = cursor;
                    var @else = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.endIfTag(ref cursor);
                        if (r6 != null)
                        {
                            r0 = this.ReturnHelper<IfElement>(startCursor0, ref cursor, state =>
                                #line 89 "WeaveParser.peg"
                                                                             
        new IfElement(new[] { @if }.Concat(elseIfs).Concat(@else))
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 93 "WeaveParser.peg"
              Branch
            #line default
            > inlineIfBody(ref Cursor cursor)
        {
            IParseResult<Branch> r0 = null;
            var startCursor0 = cursor;
            IParseResult<SourceSpan> r1 = null;
            var exprStart = cursor;
            r1 = this.ifTag(ref cursor);
            var exprEnd = cursor;
            var expr = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<Element>> r2 = null;
                var bodyStart = cursor;
                r2 = this.inlineContents(ref cursor);
                var bodyEnd = cursor;
                var body = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<Branch>(startCursor0, ref cursor, state =>
                        #line 94 "WeaveParser.peg"
                                         new Branch(expr, body)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 96 "WeaveParser.peg"
                Branch
            #line default
            > inlineElifBody(ref Cursor cursor)
        {
            IParseResult<Branch> r0 = null;
            var startCursor0 = cursor;
            IParseResult<SourceSpan> r1 = null;
            var exprStart = cursor;
            r1 = this.elifTag(ref cursor);
            var exprEnd = cursor;
            var expr = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<Element>> r2 = null;
                var bodyStart = cursor;
                r2 = this.inlineContents(ref cursor);
                var bodyEnd = cursor;
                var body = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<Branch>(startCursor0, ref cursor, state =>
                        #line 97 "WeaveParser.peg"
                                         new Branch(expr, body)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 99 "WeaveParser.peg"
                Branch
            #line default
            > inlineElseBody(ref Cursor cursor)
        {
            IParseResult<Branch> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.elseTag(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<Element>> r2 = null;
                var bodyStart = cursor;
                r2 = this.inlineContents(ref cursor);
                var bodyEnd = cursor;
                var body = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<Branch>(startCursor0, ref cursor, state =>
                        #line 100 "WeaveParser.peg"
                                         new Branch(null, body)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 102 "WeaveParser.peg"
             EachElement
            #line default
            > eachElement(ref Cursor cursor)
        {
            IParseResult<EachElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<EachBody> r1 = null;
            var eachStart = cursor;
            r1 = this.eachBody(ref cursor);
            var eachEnd = cursor;
            var each = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<DelimitBody>> r2 = null;
                var delimitStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<DelimitBody>();
                while (l0.Count < 1)
                {
                    IParseResult<DelimitBody> r3 = null;
                    r3 = this.delimitBody(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<DelimitBody>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var delimitEnd = cursor;
                var delimit = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<NoneBody>> r4 = null;
                    var noneStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<NoneBody>();
                    while (l1.Count < 1)
                    {
                        IParseResult<NoneBody> r5 = null;
                        r5 = this.noneBody(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r4 = this.ReturnHelper<IList<NoneBody>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    var noneEnd = cursor;
                    var none = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        var endIndentationStart = cursor;
                        var startCursor3 = cursor;
                        IParseResult<string> r7 = null;
                        r7 = this.ParseLiteral(ref cursor, "");
                        if (r7 != null)
                        {
                            IParseResult<IList<string>> r8 = null;
                            var startCursor4 = cursor;
                            var l2 = new List<string>();
                            while (true)
                            {
                                IParseResult<string> r9 = null;
                                r9 = this.WS(ref cursor);
                                if (r9 != null)
                                {
                                    l2.Add(r9.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r8 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                            if (r8 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor3.Location;
                                    r6 = this.ReturnHelper<string>(startCursor3, ref cursor, state =>
                                        state.Subject.Substring(startCursor3.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                        var endIndentationEnd = cursor;
                        var endIndentation = ValueOrDefault(r6);
                        if (r6 != null)
                        {
                            IParseResult<string> r10 = null;
                            r10 = this.endEachTag(ref cursor);
                            if (r10 != null)
                            {
                                IParseResult<IList<string>> r11 = null;
                                var startCursor5 = cursor;
                                var l3 = new List<string>();
                                while (true)
                                {
                                    IParseResult<string> r12 = null;
                                    r12 = this.WS(ref cursor);
                                    if (r12 != null)
                                    {
                                        l3.Add(r12.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r11 = this.ReturnHelper<IList<string>>(startCursor5, ref cursor, state => l3.AsReadOnly());
                                if (r11 != null)
                                {
                                    IParseResult<string> r13 = null;
                                    if (r13 == null)
                                    {
                                        r13 = this.EOL(ref cursor);
                                    }
                                    if (r13 == null)
                                    {
                                        r13 = this.EOF(ref cursor);
                                    }
                                    if (r13 != null)
                                    {
                                        r0 = this.ReturnHelper<EachElement>(startCursor0, ref cursor, state =>
                                            #line 103 "WeaveParser.peg"
                                                                                                            
        new EachElement(@each, delimit.SingleOrDefault(), none.SingleOrDefault(), endIndentation)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 107 "WeaveParser.peg"
          EachBody
            #line default
            > eachBody(ref Cursor cursor)
        {
            IParseResult<EachBody> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var indentationStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.WS(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var indentationEnd = cursor;
            var indentation = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<SourceSpan> r5 = null;
                var exprStart = cursor;
                r5 = this.eachTag(ref cursor);
                var exprEnd = cursor;
                var expr = ValueOrDefault(r5);
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.WS(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.EOL(ref cursor);
                        if (r8 != null)
                        {
                            IParseResult<IList<Element>> r9 = null;
                            var bodyStart = cursor;
                            r9 = this.lines(ref cursor);
                            var bodyEnd = cursor;
                            var body = ValueOrDefault(r9);
                            if (r9 != null)
                            {
                                r0 = this.ReturnHelper<EachBody>(startCursor0, ref cursor, state =>
                                    #line 108 "WeaveParser.peg"
                                                             new EachBody(expr, (IList<Element>)body, indentation)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 110 "WeaveParser.peg"
             DelimitBody
            #line default
            > delimitBody(ref Cursor cursor)
        {
            IParseResult<DelimitBody> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var indentationStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.WS(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var indentationEnd = cursor;
            var indentation = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r5 = null;
                r5 = this.delimitTag(ref cursor);
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.WS(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.EOL(ref cursor);
                        if (r8 != null)
                        {
                            IParseResult<IList<Element>> r9 = null;
                            var bodyStart = cursor;
                            r9 = this.lines(ref cursor);
                            var bodyEnd = cursor;
                            var body = ValueOrDefault(r9);
                            if (r9 != null)
                            {
                                r0 = this.ReturnHelper<DelimitBody>(startCursor0, ref cursor, state =>
                                    #line 111 "WeaveParser.peg"
                                                           new DelimitBody(body, indentation)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 113 "WeaveParser.peg"
          NoneBody
            #line default
            > noneBody(ref Cursor cursor)
        {
            IParseResult<NoneBody> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var indentationStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.WS(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var indentationEnd = cursor;
            var indentation = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r5 = null;
                r5 = this.noneTag(ref cursor);
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.WS(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.EOL(ref cursor);
                        if (r8 != null)
                        {
                            IParseResult<IList<Element>> r9 = null;
                            var bodyStart = cursor;
                            r9 = this.lines(ref cursor);
                            var bodyEnd = cursor;
                            var body = ValueOrDefault(r9);
                            if (r9 != null)
                            {
                                r0 = this.ReturnHelper<NoneBody>(startCursor0, ref cursor, state =>
                                    #line 114 "WeaveParser.peg"
                                                        new NoneBody(body, indentation)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 116 "WeaveParser.peg"
                   EachElement
            #line default
            > inlineEachElement(ref Cursor cursor)
        {
            IParseResult<EachElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<EachBody> r1 = null;
            var eachStart = cursor;
            r1 = this.inlineEachBody(ref cursor);
            var eachEnd = cursor;
            var each = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<DelimitBody>> r2 = null;
                var delimitStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<DelimitBody>();
                while (l0.Count < 1)
                {
                    IParseResult<DelimitBody> r3 = null;
                    r3 = this.inlineDelimitBody(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<DelimitBody>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var delimitEnd = cursor;
                var delimit = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<NoneBody>> r4 = null;
                    var noneStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<NoneBody>();
                    while (l1.Count < 1)
                    {
                        IParseResult<NoneBody> r5 = null;
                        r5 = this.inlineNoneBody(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r4 = this.ReturnHelper<IList<NoneBody>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    var noneEnd = cursor;
                    var none = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.endEachTag(ref cursor);
                        if (r6 != null)
                        {
                            r0 = this.ReturnHelper<EachElement>(startCursor0, ref cursor, state =>
                                #line 117 "WeaveParser.peg"
                                                                                      
        new EachElement(@each, delimit.SingleOrDefault(), none.SingleOrDefault())
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 121 "WeaveParser.peg"
                EachBody
            #line default
            > inlineEachBody(ref Cursor cursor)
        {
            IParseResult<EachBody> r0 = null;
            var startCursor0 = cursor;
            IParseResult<SourceSpan> r1 = null;
            var exprStart = cursor;
            r1 = this.eachTag(ref cursor);
            var exprEnd = cursor;
            var expr = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<Element>> r2 = null;
                var bodyStart = cursor;
                r2 = this.inlineContents(ref cursor);
                var bodyEnd = cursor;
                var body = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<EachBody>(startCursor0, ref cursor, state =>
                        #line 122 "WeaveParser.peg"
                                         new EachBody(expr, body)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 124 "WeaveParser.peg"
                   DelimitBody
            #line default
            > inlineDelimitBody(ref Cursor cursor)
        {
            IParseResult<DelimitBody> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.delimitTag(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<Element>> r2 = null;
                var bodyStart = cursor;
                r2 = this.inlineContents(ref cursor);
                var bodyEnd = cursor;
                var body = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<DelimitBody>(startCursor0, ref cursor, state =>
                        #line 125 "WeaveParser.peg"
                                       new DelimitBody(body)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 127 "WeaveParser.peg"
                NoneBody
            #line default
            > inlineNoneBody(ref Cursor cursor)
        {
            IParseResult<NoneBody> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.noneTag(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<Element>> r2 = null;
                var bodyStart = cursor;
                r2 = this.inlineContents(ref cursor);
                var bodyEnd = cursor;
                var body = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<NoneBody>(startCursor0, ref cursor, state =>
                        #line 128 "WeaveParser.peg"
                                    new NoneBody(body)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 130 "WeaveParser.peg"
               WrapIfElement
            #line default
            > wrapIfElement(ref Cursor cursor)
        {
            IParseResult<WrapIfElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var indentationStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.WS(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var indentationEnd = cursor;
            var indentation = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<SourceSpan> r5 = null;
                var exprStart = cursor;
                r5 = this.wrapIfTag(ref cursor);
                var exprEnd = cursor;
                var expr = ValueOrDefault(r5);
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.WS(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.EOL(ref cursor);
                        if (r8 != null)
                        {
                            IParseResult<IList<Element>> r9 = null;
                            var beforeStart = cursor;
                            r9 = this.lines(ref cursor);
                            var beforeEnd = cursor;
                            var before = ValueOrDefault(r9);
                            if (r9 != null)
                            {
                                IParseResult<BodyElement> r10 = null;
                                var bodyStart = cursor;
                                r10 = this.bodyElement(ref cursor);
                                var bodyEnd = cursor;
                                var body = ValueOrDefault(r10);
                                if (r10 != null)
                                {
                                    IParseResult<IList<Element>> r11 = null;
                                    var afterStart = cursor;
                                    r11 = this.lines(ref cursor);
                                    var afterEnd = cursor;
                                    var after = ValueOrDefault(r11);
                                    if (r11 != null)
                                    {
                                        IParseResult<string> r12 = null;
                                        var endIndentationStart = cursor;
                                        var startCursor4 = cursor;
                                        IParseResult<string> r13 = null;
                                        r13 = this.ParseLiteral(ref cursor, "");
                                        if (r13 != null)
                                        {
                                            IParseResult<IList<string>> r14 = null;
                                            var startCursor5 = cursor;
                                            var l2 = new List<string>();
                                            while (true)
                                            {
                                                IParseResult<string> r15 = null;
                                                r15 = this.WS(ref cursor);
                                                if (r15 != null)
                                                {
                                                    l2.Add(r15.Value);
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                            r14 = this.ReturnHelper<IList<string>>(startCursor5, ref cursor, state => l2.AsReadOnly());
                                            if (r14 != null)
                                            {
                                                {
                                                    var len = cursor.Location - startCursor4.Location;
                                                    r12 = this.ReturnHelper<string>(startCursor4, ref cursor, state =>
                                                        state.Subject.Substring(startCursor4.Location, len)
                                                        );
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor4;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor4;
                                        }
                                        var endIndentationEnd = cursor;
                                        var endIndentation = ValueOrDefault(r12);
                                        if (r12 != null)
                                        {
                                            IParseResult<string> r16 = null;
                                            r16 = this.endWrapIfTag(ref cursor);
                                            if (r16 != null)
                                            {
                                                IParseResult<IList<string>> r17 = null;
                                                var startCursor6 = cursor;
                                                var l3 = new List<string>();
                                                while (true)
                                                {
                                                    IParseResult<string> r18 = null;
                                                    r18 = this.WS(ref cursor);
                                                    if (r18 != null)
                                                    {
                                                        l3.Add(r18.Value);
                                                    }
                                                    else
                                                    {
                                                        break;
                                                    }
                                                }
                                                r17 = this.ReturnHelper<IList<string>>(startCursor6, ref cursor, state => l3.AsReadOnly());
                                                if (r17 != null)
                                                {
                                                    IParseResult<string> r19 = null;
                                                    if (r19 == null)
                                                    {
                                                        r19 = this.EOL(ref cursor);
                                                    }
                                                    if (r19 == null)
                                                    {
                                                        r19 = this.EOF(ref cursor);
                                                    }
                                                    if (r19 != null)
                                                    {
                                                        r0 = this.ReturnHelper<WrapIfElement>(startCursor0, ref cursor, state =>
                                                            #line 131 "WeaveParser.peg"
                                                                                                                                                  
        new WrapIfElement(indentation, expr, before, body, after, endIndentation)
                                                            #line default
                                                            );
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor0;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor0;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 135 "WeaveParser.peg"
             BodyElement
            #line default
            > bodyElement(ref Cursor cursor)
        {
            IParseResult<BodyElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var indentationStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.WS(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var indentationEnd = cursor;
            var indentation = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r5 = null;
                r5 = this.bodyTag(ref cursor);
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.WS(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.EOL(ref cursor);
                        if (r8 != null)
                        {
                            IParseResult<IList<Element>> r9 = null;
                            var bodyStart = cursor;
                            r9 = this.lines(ref cursor);
                            var bodyEnd = cursor;
                            var body = ValueOrDefault(r9);
                            if (r9 != null)
                            {
                                IParseResult<string> r10 = null;
                                var endIndentationStart = cursor;
                                var startCursor4 = cursor;
                                IParseResult<string> r11 = null;
                                r11 = this.ParseLiteral(ref cursor, "");
                                if (r11 != null)
                                {
                                    IParseResult<IList<string>> r12 = null;
                                    var startCursor5 = cursor;
                                    var l2 = new List<string>();
                                    while (true)
                                    {
                                        IParseResult<string> r13 = null;
                                        r13 = this.WS(ref cursor);
                                        if (r13 != null)
                                        {
                                            l2.Add(r13.Value);
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    r12 = this.ReturnHelper<IList<string>>(startCursor5, ref cursor, state => l2.AsReadOnly());
                                    if (r12 != null)
                                    {
                                        {
                                            var len = cursor.Location - startCursor4.Location;
                                            r10 = this.ReturnHelper<string>(startCursor4, ref cursor, state =>
                                                state.Subject.Substring(startCursor4.Location, len)
                                                );
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor4;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor4;
                                }
                                var endIndentationEnd = cursor;
                                var endIndentation = ValueOrDefault(r10);
                                if (r10 != null)
                                {
                                    IParseResult<string> r14 = null;
                                    r14 = this.endBodyTag(ref cursor);
                                    if (r14 != null)
                                    {
                                        IParseResult<IList<string>> r15 = null;
                                        var startCursor6 = cursor;
                                        var l3 = new List<string>();
                                        while (true)
                                        {
                                            IParseResult<string> r16 = null;
                                            r16 = this.WS(ref cursor);
                                            if (r16 != null)
                                            {
                                                l3.Add(r16.Value);
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        r15 = this.ReturnHelper<IList<string>>(startCursor6, ref cursor, state => l3.AsReadOnly());
                                        if (r15 != null)
                                        {
                                            IParseResult<string> r17 = null;
                                            if (r17 == null)
                                            {
                                                r17 = this.EOL(ref cursor);
                                            }
                                            if (r17 == null)
                                            {
                                                r17 = this.EOF(ref cursor);
                                            }
                                            if (r17 != null)
                                            {
                                                r0 = this.ReturnHelper<BodyElement>(startCursor0, ref cursor, state =>
                                                    #line 136 "WeaveParser.peg"
                                                                                                          
        new BodyElement(indentation, body, endIndentation)
                                                    #line default
                                                    );
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 140 "WeaveParser.peg"
                     WrapIfElement
            #line default
            > inlineWrapIfElement(ref Cursor cursor)
        {
            IParseResult<WrapIfElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<SourceSpan> r1 = null;
            var exprStart = cursor;
            r1 = this.wrapIfTag(ref cursor);
            var exprEnd = cursor;
            var expr = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<Element>> r2 = null;
                var beforeStart = cursor;
                r2 = this.inlineContents(ref cursor);
                var beforeEnd = cursor;
                var before = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<BodyElement> r3 = null;
                    var bodyStart = cursor;
                    r3 = this.inlineBodyElement(ref cursor);
                    var bodyEnd = cursor;
                    var body = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<Element>> r4 = null;
                        var afterStart = cursor;
                        r4 = this.inlineContents(ref cursor);
                        var afterEnd = cursor;
                        var after = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.endWrapIfTag(ref cursor);
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper<WrapIfElement>(startCursor0, ref cursor, state =>
                                    #line 141 "WeaveParser.peg"
                                                                                                     
        new WrapIfElement(null, expr, before, body, after, null)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 145 "WeaveParser.peg"
                   BodyElement
            #line default
            > inlineBodyElement(ref Cursor cursor)
        {
            IParseResult<BodyElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.bodyTag(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<Element>> r2 = null;
                var bodyStart = cursor;
                r2 = this.inlineContents(ref cursor);
                var bodyEnd = cursor;
                var body = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.endBodyTag(ref cursor);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<BodyElement>(startCursor0, ref cursor, state =>
                            #line 146 "WeaveParser.peg"
                                              
        new BodyElement(null, body, null)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 150 "WeaveParser.peg"
               RenderElement
            #line default
            > renderElement(ref Cursor cursor)
        {
            IParseResult<RenderElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var indentationStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.WS(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var indentationEnd = cursor;
            var indentation = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<RenderTag> r5 = null;
                var tagStart = cursor;
                r5 = this.renderTag(ref cursor);
                var tagEnd = cursor;
                var tag = ValueOrDefault(r5);
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.WS(ref cursor);
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        if (r8 == null)
                        {
                            r8 = this.EOL(ref cursor);
                        }
                        if (r8 == null)
                        {
                            r8 = this.EOF(ref cursor);
                        }
                        if (r8 != null)
                        {
                            r0 = this.ReturnHelper<RenderElement>(startCursor0, ref cursor, state =>
                                #line 151 "WeaveParser.peg"
                                                           new RenderElement(tag.Method, tag.Expression, indentation)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 153 "WeaveParser.peg"
                     RenderElement
            #line default
            > inlineRenderElement(ref Cursor cursor)
        {
            IParseResult<RenderElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<RenderTag> r1 = null;
            var tagStart = cursor;
            r1 = this.renderTag(ref cursor);
            var tagEnd = cursor;
            var tag = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<RenderElement>(startCursor0, ref cursor, state =>
                    #line 154 "WeaveParser.peg"
                      new RenderElement(tag.Method, tag.Expression)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 156 "WeaveParser.peg"
         SourceSpan
            #line default
            > codeTag(ref Cursor cursor)
        {
            IParseResult<SourceSpan> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "{{");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                if (r3 == null)
                {
                    r3 = this.WS(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.EOL(ref cursor);
                }
                if (r3 != null)
                {
                    cursor = startCursor1;
                    r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                if (r2 != null)
                {
                    IParseResult<SourceSpan> r4 = null;
                    var exprStart = cursor;
                    r4 = this.expression(ref cursor);
                    var exprEnd = cursor;
                    var expr = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ParseLiteral(ref cursor, "}}");
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper<SourceSpan>(startCursor0, ref cursor, state =>
                                #line 156 "WeaveParser.peg"
                                                                                  expr
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 157 "WeaveParser.peg"
         SourceSpan
            #line default
            > ifTag(ref Cursor cursor)
        {
            IParseResult<SourceSpan> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "{{if");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                if (r3 == null)
                {
                    r3 = this.WS(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.EOL(ref cursor);
                }
                if (r3 != null)
                {
                    cursor = startCursor1;
                    r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                if (r2 != null)
                {
                    IParseResult<SourceSpan> r4 = null;
                    var exprStart = cursor;
                    r4 = this.expression(ref cursor);
                    var exprEnd = cursor;
                    var expr = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ParseLiteral(ref cursor, "}}");
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper<SourceSpan>(startCursor0, ref cursor, state =>
                                #line 157 "WeaveParser.peg"
                                                                                  expr
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 158 "WeaveParser.peg"
         SourceSpan
            #line default
            > elifTag(ref Cursor cursor)
        {
            IParseResult<SourceSpan> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "{{elif");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                if (r3 == null)
                {
                    r3 = this.WS(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.EOL(ref cursor);
                }
                if (r3 != null)
                {
                    cursor = startCursor1;
                    r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                if (r2 != null)
                {
                    IParseResult<SourceSpan> r4 = null;
                    var exprStart = cursor;
                    r4 = this.expression(ref cursor);
                    var exprEnd = cursor;
                    var expr = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ParseLiteral(ref cursor, "}}");
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper<SourceSpan>(startCursor0, ref cursor, state =>
                                #line 158 "WeaveParser.peg"
                                                                                  expr
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> elseTag(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "{{else}}");
            return r0;
        }

        private IParseResult<string> endIfTag(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "{{/if}}");
            return r0;
        }

        private IParseResult<
            #line 161 "WeaveParser.peg"
         SourceSpan
            #line default
            > eachTag(ref Cursor cursor)
        {
            IParseResult<SourceSpan> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "{{each");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                if (r3 == null)
                {
                    r3 = this.WS(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.EOL(ref cursor);
                }
                if (r3 != null)
                {
                    cursor = startCursor1;
                    r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                if (r2 != null)
                {
                    IParseResult<SourceSpan> r4 = null;
                    var exprStart = cursor;
                    r4 = this.expression(ref cursor);
                    var exprEnd = cursor;
                    var expr = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ParseLiteral(ref cursor, "}}");
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper<SourceSpan>(startCursor0, ref cursor, state =>
                                #line 161 "WeaveParser.peg"
                                                                                  expr
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> delimitTag(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "{{delimit}}");
            return r0;
        }

        private IParseResult<string> noneTag(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "{{none}}");
            return r0;
        }

        private IParseResult<string> endEachTag(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "{{/each}}");
            return r0;
        }

        private IParseResult<
            #line 165 "WeaveParser.peg"
           SourceSpan
            #line default
            > wrapIfTag(ref Cursor cursor)
        {
            IParseResult<SourceSpan> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "{{wrapif");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                if (r3 == null)
                {
                    r3 = this.WS(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.EOL(ref cursor);
                }
                if (r3 != null)
                {
                    cursor = startCursor1;
                    r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                if (r2 != null)
                {
                    IParseResult<SourceSpan> r4 = null;
                    var exprStart = cursor;
                    r4 = this.expression(ref cursor);
                    var exprEnd = cursor;
                    var expr = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ParseLiteral(ref cursor, "}}");
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper<SourceSpan>(startCursor0, ref cursor, state =>
                                #line 165 "WeaveParser.peg"
                                                                                  expr
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> bodyTag(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "{{body}}");
            return r0;
        }

        private IParseResult<string> endBodyTag(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "{{/body}}");
            return r0;
        }

        private IParseResult<string> endWrapIfTag(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "{{/wrapif}}");
            return r0;
        }

        private IParseResult<
            #line 169 "WeaveParser.peg"
           RenderTag
            #line default
            > renderTag(ref Cursor cursor)
        {
            IParseResult<RenderTag> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "{{@");
            if (r1 != null)
            {
                IParseResult<SourceSpan> r2 = null;
                var nameStart = cursor;
                r2 = this.identifier(ref cursor);
                var nameEnd = cursor;
                var name = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var startCursor1 = cursor;
                    IParseResult<string> r4 = null;
                    if (r4 == null)
                    {
                        r4 = this.WS(ref cursor);
                    }
                    if (r4 == null)
                    {
                        r4 = this.EOL(ref cursor);
                    }
                    if (r4 != null)
                    {
                        cursor = startCursor1;
                        r3 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                    }
                    if (r3 != null)
                    {
                        IParseResult<SourceSpan> r5 = null;
                        var exprStart = cursor;
                        r5 = this.expression(ref cursor);
                        var exprEnd = cursor;
                        var expr = ValueOrDefault(r5);
                        if (r5 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.ParseLiteral(ref cursor, "}}");
                            if (r6 != null)
                            {
                                r0 = this.ReturnHelper<RenderTag>(startCursor0, ref cursor, state =>
                                    #line 169 "WeaveParser.peg"
                                                                                  new RenderTag { Method = name, Expression = expr }
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 170 "WeaveParser.peg"
         EchoTag
            #line default
            > echoTag(ref Cursor cursor)
        {
            IParseResult<EchoTag> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "{{:");
                if (r1 != null)
                {
                    IParseResult<SourceSpan> r2 = null;
                    var exprStart = cursor;
                    r2 = this.expression(ref cursor);
                    var exprEnd = cursor;
                    var expr = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.ParseLiteral(ref cursor, "}}");
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<EchoTag>(startCursor0, ref cursor, state =>
                                #line 170 "WeaveParser.peg"
                                                                                  new EchoTag(expr, encoded: true)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.ParseLiteral(ref cursor, "{{=");
                if (r4 != null)
                {
                    IParseResult<SourceSpan> r5 = null;
                    var exprStart = cursor;
                    r5 = this.expression(ref cursor);
                    var exprEnd = cursor;
                    var expr = ValueOrDefault(r5);
                    if (r5 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseLiteral(ref cursor, "}}");
                        if (r6 != null)
                        {
                            r0 = this.ReturnHelper<EchoTag>(startCursor1, ref cursor, state =>
                                #line 171 "WeaveParser.peg"
                                                                                  new EchoTag(expr, encoded: false)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<string> text(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var storageKey = new CacheKey("text", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<string>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r4 = null;
                    var startCursor3 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.EOL(ref cursor);
                    if (r5 == null)
                    {
                        r4 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        var startCursor4 = cursor;
                        IParseResult<string> r7 = null;
                        r7 = this.ParseLiteral(ref cursor, "{{");
                        if (r7 == null)
                        {
                            r6 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                        }
                        else
                        {
                            cursor = startCursor4;
                        }
                        if (r6 != null)
                        {
                            IParseResult<string> r8 = null;
                            r8 = this.ParseAny(ref cursor);
                            if (r8 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor2.Location;
                                    r3 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                        state.Subject.Substring(startCursor2.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r2 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            this.storage[storageKey] = r0;
            return r0;
        }

        private IParseResult<
            #line 176 "WeaveParser.peg"
            SourceSpan
            #line default
            > expression(ref Cursor cursor)
        {
            IParseResult<SourceSpan> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var textStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "");
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    var startCursor3 = cursor;
                    IParseResult<string> r5 = null;
                    var startCursor4 = cursor;
                    IParseResult<string> r6 = null;
                    r6 = this.ParseLiteral(ref cursor, "}}");
                    if (r6 == null)
                    {
                        r5 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                    if (r5 != null)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.ParseAny(ref cursor);
                        if (r7 != null)
                        {
                            {
                                var len = cursor.Location - startCursor3.Location;
                                r4 = this.ReturnHelper<string>(startCursor3, ref cursor, state =>
                                    state.Subject.Substring(startCursor3.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r3 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor2;
                }
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var textEnd = cursor;
            var text = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<SourceSpan>(startCursor0, ref cursor, state =>
                    #line 177 "WeaveParser.peg"
                             new SourceSpan(text, textStart, textEnd)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 179 "WeaveParser.peg"
            SourceSpan
            #line default
            > identifier(ref Cursor cursor)
        {
            IParseResult<SourceSpan> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var iStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            var startCursor2 = cursor;
            IParseResult<string> r3 = null;
            r3 = this.digit(ref cursor);
            if (r3 == null)
            {
                r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor2;
            }
            if (r2 != null)
            {
                IParseResult<IList<string>> r4 = null;
                var startCursor3 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r5 = null;
                    if (r5 == null)
                    {
                        r5 = this.letter(ref cursor);
                    }
                    if (r5 == null)
                    {
                        r5 = this.digit(ref cursor);
                    }
                    if (r5 == null)
                    {
                        r5 = this.ParseLiteral(ref cursor, "_");
                    }
                    if (r5 == null)
                    {
                        r5 = this.ParseLiteral(ref cursor, "$");
                    }
                    if (r5 != null)
                    {
                        l0.Add(r5.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r4 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor3;
                }
                if (r4 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var iEnd = cursor;
            var i = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<SourceSpan>(startCursor0, ref cursor, state =>
                    #line 180 "WeaveParser.peg"
                                                 new SourceSpan(i, iStart, iEnd)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> digit(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "09");
            return r0;
        }

        private IParseResult<string> letter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.lowerCaseLetter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.upperCaseLetter(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> lowerCaseLetter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "az");
            return r0;
        }

        private IParseResult<string> upperCaseLetter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "AZ");
            return r0;
        }

        private IParseResult<string> WS(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "  \t\t\v\v\f\f\u00a0\u00a0\ufeff\ufeff\u1680\u1680\u180e\u180e\u2000\u200a\u202f\u202f\u205f\u205f\u3000\u3000");
            return r0;
        }

        private IParseResult<string> EOL(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\n");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\r\n");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\r");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\u2028");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\u2029");
            }
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseAny(ref cursor);
            if (r1 == null)
            {
                r0 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
